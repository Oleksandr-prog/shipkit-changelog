package org.shipkit.changelog

import org.gradle.testkit.runner.GradleRunner
import org.junit.Rule
import org.junit.rules.TemporaryFolder
import spock.lang.Specification

/**
 * Only smoke test, forever! Don't add more tests here, instead cover the complexity in lower level unit tests.
 */
class ChangelogPluginIntegTest extends Specification {

    @Rule TemporaryFolder tmp = new TemporaryFolder()

    def setup() {
        file("settings.gradle")
        file("build.gradle") << """
            plugins {  id('org.shipkit.changelog')}
        """
    }

    def "generates changelog"() {
        //TODO needs to be based on real repo and unignored. Possibly only run in CI.
        given:
        file("build.gradle") << """
            version = "3.3.11"
            tasks.named("generateChangelog") {
                date = "2020-06-06"
                previousRevision = "v3.3.10"                    
                revision = "v3.3.11"                      
                outputFile = new File(buildDir, "changelog.md")
                readOnlyToken = "a0a4c0f41c200f7c653323014d6a72a127764e17"
                repository = "mockito/mockito"
                workingDir = new File("/Users/sfaber/mockito/src")
            }
        """

        when:
        runner("generateChangelog").build()

        then:
        file("build/changelog.md").text == """<sup><sup>*Changelog generated by [Shipkit Changelog Gradle Plugin](https://github.com/shipkit/org.shipkit.shipkit-changelog)*</sup></sup>

#### 3.3.11
 - 2020-06-06 - [6 commit(s)](https://github.com/mockito/mockito/compare/v3.3.10...v3.3.11) by Andrei Silviu Dragnea, Eitan Adler, Szczepan Faber, shipkit-org
 - JUnit 5 strict stubs check should not suppress the regular test failure [(#1928)](https://github.com/mockito/mockito/pull/1928)
 - Fix import order [(#1927)](https://github.com/mockito/mockito/pull/1927)
 - [build] add ben-manes dependency upgrade finder [(#1922)](https://github.com/mockito/mockito/pull/1922)"""
    }

    File file(String path) {
        def f = new File(rootDir, path)
        if (!f.exists()) {
            f.parentFile.mkdirs()
            f.createNewFile()
            assert f.exists()
        }
        return f
    }

    File getRootDir() {
        return tmp.root
    }

    private GradleRunner runner(String... args) {
        def runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments(args)
        runner.withProjectDir(rootDir)
        runner
    }
}
